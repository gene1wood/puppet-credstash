# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
require 'json'
##
# call-seq:
#    destringify(string) -> object
#
# Given a string created from a ruby inspect call, transform that string
# into a valid JSON string, parse the JSON string and return the resulting
# object.
#
#    mystring = '{:dbpassword=>"my \"special\" s3cret"}'
#    destringify(mystring)  #=> {"dbpassword":"my \"special\" s3cret"} 

# ---- original file header ----
#
# @summary
#   Summarise what the function does here
#
Puppet::Functions.create_function(:'credstash::destringify') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    # See http://json.org/

    string = args[0]
    # Transform object string symbols to quoted strings
    string.gsub!(/([{,]\s*):([^>\s]+)\s*=>/, '\1"\2"=>')
     
    # Transform object string numbers to quoted strings
    string.gsub!(/([{,]\s*)([0-9]+\.?[0-9]*)\s*=>/, '\1"\2"=>')
     
    # Transform object value symbols to quotes strings
    string.gsub!(/([{,]\s*)(".+?"|[0-9]+\.?[0-9]*)\s*=>\s*:([^,}\s]+\s*)/, '\1\2=>"\3"')
     
    # Transform array value symbols to quotes strings
    string.gsub!(/([\[,]\s*):([^,\]\s]+)/, '\1"\2"')
     
    # Transform object string object value delimiter to colon delimiter
    string.gsub!(/([{,]\s*)(".+?"|[0-9]+\.?[0-9]*)\s*=>/, '\1\2:')

    result = JSON.parse(string)
    # result.inspect == string ? result : false
    result
  
  end
end
