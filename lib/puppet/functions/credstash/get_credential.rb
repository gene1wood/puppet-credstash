# This is an autogenerated function, ported from the original legacy version.
# It /should work/ as is, but will not have all the benefits of the modern
# function API. You should see the function docs to learn how to add function
# signatures for type safety and to document this function using puppet-strings.
#
# https://puppet.com/docs/puppet/latest/custom_functions_ruby.html
#
# ---- original file header ----
##
# call-seq:
#    get_credential(string) -> string
#
# Fetch a specific credstash credential from the credstash facter fact
# whether the fact is a Puppet 3.x stringified hash or a Puppet 4.x
# hash. After unescaping the credential return it.
#
#    get_credential('app_password')  #=> s3cret
#    get_credential('my_roles')  #=> ["arn:aws:iam::012345678901:role/myrole",
#                                    "arn:aws:iam::123456789012:role/myrole"]

# ---- original file header ----
#
# @summary
#   Summarise what the function does here
#
Puppet::Functions.create_function(:'credstash::get_credential') do
  # @param args
  #   The original array of arguments. Port this to individually managed params
  #   to get the full benefit of the modern function API.
  #
  # @return [Data type]
  #   Describe what the function returns here
  #
  dispatch :default_impl do
    # Call the method named 'default_impl' when this is matched
    # Port this to match individual params for better type safety
    repeated_param 'Any', :args
  end


  def default_impl(*args)
    
    credstash = lookupvar('credstash')
    if args.empty? or not args[0].is_a? String
      nil
    elsif credstash.is_a? Hash and credstash.has_key? args[0]
      credstash[args[0]]
    elsif credstash.is_a? String
      # Puppet 3.x with stringify_facts = true (default)
      credentials = function_destringify([credstash])
      credentials.has_key?(args[0]) ? function_unescape([credentials[args[0]]]) : nil
    else
      nil
    end
  
  end
end
